LazyLoad = Class.create(
{
	initialize: function(options)
	{
		this.options = options || {};
					
		$$(this.options.target).each(
		    function(el)
		    {
		        if(!this.withinViewport(el))
		        {
		            el._src = el.src;
		            el.src = this.options.placeholder;
					//console.log("Setting lazyload for " + el._src);
			    }
			}.bind(this)
		);
		Event.observe(window, 'scroll', this.load.bind(this));
	},

	load: function(el)
	{
		$$(this.options.target).each(
			function(el)
			{
				if(el._src && this.withinViewport(el))
				{
					el.src = el._src;
					delete el._src;
					//console.log("Lazyloading " + el.src);
				}
			}.bind(this)
		);
	},

	withinViewport: function(el)
	{
		var elOffset = el.cumulativeOffset(),
		vpOffset = document.viewport.getScrollOffsets(),
		elDim = el.getDimensions();
		vpDim = document.viewport.getDimensions();

		if(
			elOffset[1] + elDim.height < vpOffset[1]
			||
			elOffset[1] > vpOffset[1] + vpDim.height
			||
			elOffset[0] + elDim.width < vpOffset[0]
			||
			elOffset[0] > vpOffset[0] + vpDim.width
		)
		{
			return false;
		}
		return true;
	}
});